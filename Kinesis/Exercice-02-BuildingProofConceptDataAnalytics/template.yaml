AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Building a Proof of Concept for Data Analytics

Resources:
  
  #### Bucket  ###############################################
  BucketKinesisData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-BucketKinesisData-001
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  BucketKinesisDataPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketKinesisData
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetBucketMultipartUploads
              - s3:PutObjectAcl
            Effect: 'Allow'
            Principal:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: 
              - !Sub 'arn:${AWS::Partition}:s3:::${BucketKinesisData}'
              - !Sub 'arn:${AWS::Partition}:s3:::${BucketKinesisData}/*'
  
  #### API Role   ##############################################
  EventAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-API-Firehose
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'firehose:PutRecord'
              Resource: "*"
    
  #### Lambda Function  ############################################
  FunctionTransformData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-TransformData
      CodeUri: functions/transform-data/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt MyHttpApiRole.Arn
      # Event kinesis firehose
      Event:
        Type: Firehose
        Properties:
          DeliveryStream: !Ref FirehoseDeliveryStream
          BatchSize: 1
          StartingPosition: LATEST
  
  #### Kinesis Role  ############################################
  KinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Kinesis Firehose Role for Client Events
      RoleName: !Join [ "", [!Ref "AWS::StackName", "clientevents.firehose"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'      
  FirehoseTransformPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [!Ref "AWS::StackName", "clienteventsfirehose"] ]
      Roles:
        - !Ref KinesisFirehoseRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !GetAtt ClientEventsBucket.Arn
              - !Join [ "", [!GetAtt ClientEventsBucket.Arn, "/*" ] ]
          - Effect: "Allow"
            Action: 
              - "lambda:InvokeFunction"
              - "lambda:GetFunctionConfiguration"
            Resource: 
              - !Join ["", [!GetAtt TransformationFunction.Arn, ":$LATEST"] ]
  
  #### Firehose Delivery Stream  ######################################
  FirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${AWS::StackName}-FirehoseDeliveryStream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt BucketKinesisData.Arn
        Prefix: "!{partitionKeyFromQuery:eventType}/!{partitionKeyFromQuery:schemaVersion}/"
        ErrorOutputPrefix: "error/"
        RoleARN: !GetAtt KinesisFirehoseRole.Arn
        DynamicPartitioningConfiguration:
          Enabled: True
        ProcessingConfiguration:
          Enabled: True
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !Join [":" , [!GetAtt FunctionTransformData.Arn, "$LATEST"]]
                - ParameterName: NumberOfRetries
                  ParameterValue: 3
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt KinesisFirehoseRole.Arn
                - ParameterName: BufferSizeInMBs
                  ParameterValue: 3
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: 60
            - Type: RecordDeAggregation
              Parameters:
                - ParameterName: SubRecordType
                  ParameterValue: JSON
            - Type: MetadataExtraction
              Parameters:
                - ParameterName: MetadataExtractionQuery
                  ParameterValue: "{eventType:.detail.eventType,schemaVersion:.detail.schemaVersion}"
                - ParameterName: JsonParsingEngine
                  ParameterValue: JQ-1.6
  
  #### API Gateway  ############################################
  EventAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ClientEventsAPI
      EndpointConfiguration: 
        Types:
          - REGIONAL
      Body: 
        swagger: 2.0
        info:
          title: "EBClientEvents"
        schemes:
        - "https"
        paths:
          /event:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Events"
                required: true
                schema:
                  $ref: "#/definitions/Events"              
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - auth: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                credentials: !GetAtt EventAPIRole.Arn
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:events:action/PutEvents"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "#set($context.requestOverride.header.X-Amz-Target = \"\
                    AWSEvents.PutEvents\")\n#set($context.requestOverride.header.Content-Type\
                    \ = \"application/x-amz-json-1.1\")            \n#set($inputRoot = $input.path('$'))\
                    \ \n{ \n\"Entries\": [\n  #foreach($elem in $inputRoot.entries)\n  {\n\
                    \    \"Resources\": [\"$context.authorizer.clientId\"],\n    \"Detail\"\
                    : \"$util.escapeJavaScript($elem.entry)\",\n    \"DetailType\": \"$stageVariables.Environment\"\
                    ,\n    \"EventBusName\": \"$stageVariables.Bus\",\n    \"Source\":\"clientevents\"\
                    \n  }#if($foreach.hasNext),#end\n  #end\n]\n}"
                passthroughBehavior: "when_no_templates"
                type: "aws"
        securityDefinitions:
          auth:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ClientEventsAuthorizerFunction/invocations"
              authorizerResultTtlInSeconds: 0
              type: "token"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
          Events:
            type: "object"
            properties:
              entries:
                type: "array"
            title: "EventsInputModel"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
      LogGroupName: !Join ["", ["/aws/apigw/", !Ref EventAPI]]

  EventAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref EventAPI
      StageName: prod
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt AccessLogGroup.Arn
          Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId $context.extendedRequestId
        Variables:
          Bus: !Ref ClientEventBus
          Environment: prod
        Description: prod
        LoggingLevel: INFO
        MetricsEnabled: True