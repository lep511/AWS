#Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Egress Controls workshop template"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
      - Label:
          default: "EC2 Parameters"
        Parameters:
          - LatestAmiId

Parameters:
  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
  LatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
#Egress infrastructure
  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EgressVPC

  EgressInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: EgressVPC-IGW

  EgressGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        !Ref EgressInternetGateway
      VpcId: !Ref EgressVPC



# Private Subnets for Test Instances:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.0.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet1


# Public Subnets for NAT GWs:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EgressVPC-Public-Subnet1

  

# Firewall Subnets for firewall endpoints:
  FirewallSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.16.0/28"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Firewall-Subnet1

# NAT Gateway:
  NatGw1Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EgressIP:
    DependsOn:
      - EgressGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EgressInstance
      Domain: vpc

  NatGw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - NatGw1Eip
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: EgressVPC-NATGW

 
  EgressInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EgressVPC-EgressInstanceRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        -
          PolicyName: EgressInstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:DescribeParameters
                Resource:
                  Fn::Join:
                  - ':'
                  - ["arn:aws:ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "*"]

              - 
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"

  EgressInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EgressInstanceProfile
      Path: /
      Roles:
        - !Ref EgressInstanceRole

  EgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EgressSecurityGroup
      VpcId: !Ref EgressVPC
      SecurityGroupIngress:
      - IpProtocol: '-1'
        CidrIp: !Sub "${NatGw1Eip.PublicIp}/32"
        #CidrIp: !GetAtt NatGw1Eip.PublicIp



  EgressInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EgressInstanceProfile
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: '0'
          GroupSet:
            - !Ref EgressSecurityGroup
          SubnetId:  !Ref PublicSubnet1
      
      Tags:
        - Key: Name
          Value: PublicTrafficHost
      UserData:
        Fn::Base64: |
            #!/bin/bash -ex
            date > /tmp/image.log
            yum update -y

            # Install and configure FTP server
            yum install -y vsftpd
            cat << 'EOF' > /etc/vsftpd/vsftpd.conf
            ftp_data_port=21
            listen_port=21
            anonymous_enable=NO
            pasv_enable=YES
            pasv_min_port=64000
            pasv_max_port=64001
            port_enable=YES
            pasv_addr_resolve=YES
            write_enable=YES
            connect_from_port_20=YES
            ascii_upload_enable=YES
            local_enable=YES
            chroot_local_user=YES
            allow_writeable_chroot=YES
            userlist_enable=YES
            userlist_file=/etc/vsftpd/user_list
            userlist_deny=NO
            pam_service_name=vsftpd
            EOF

            # Configure FTP
            adduser badactor
            echo 5VXcbio8D3nsly | passwd --stdin badactor
            echo badactor | sudo tee ?a /etc/vsftpd/user_list
            mkdir -p /home/badactor/ftp/upload
            chmod 550 /home/badactor/ftp
            chmod 750 /home/badactor/ftp/upload
            chown -R badactor: /home/badactor/ftp

            # Add the public IP to vsftpd config
            { echo -n "pasv_address="; curl -sS "http://checkip.amazonaws.com"; } >> /etc/vsftpd/vsftpd.conf

            # Start the ftp service and set it to launch when the system boots with the following
            systemctl start vsftpd
            systemctl enable vsftpd
            systemctl status vsftpd > /tmp/vsfptd.status

            # Install and start Apache httpd
            yum install -y httpd
            sed -i '/Listen 80/a Listen 8080' /etc/httpd/conf/httpd.conf
            sed -i '/Listen 8080/a Listen 1389' /etc/httpd/conf/httpd.conf
            sed -i '/Listen 1389/a Listen 443' /etc/httpd/conf/httpd.conf           
            systemctl start httpd

            # Update sshd to Listen on port 2222
            sed -i '/^#ListenAddress ::/a Port 22\nPort 2222' /etc/ssh/sshd_config
            systemctl restart sshd


            # Install, Configure Samba
            yum install samba samba-client samba-common -y
            cat << 'EOF' > /etc/samba/smb.conf
            [share_name]
            path = /home/badactor/ftp/upload
            writable = yes
            browsable = yes
            valid users = badactor
            EOF
            # Start Samba services
            systemctl start smb
            systemctl start nmb



            # Start SSM Agent
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm



# AWS PrivateLink interface endpoint for services:
  EgressVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref EgressVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
        Tags:
          - Key: Name
            Value: EgressVPC-VpcEnpoint-Sg1

  EgressVPCSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds:
          - !Ref PrivateSubnet1
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

  EgressVPCEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds:
          - !Ref PrivateSubnet1
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

  EgressVPCSSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds:
          - !Ref PrivateSubnet1
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

# SSM Role:
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EgressVPC-SSMRole-${AWS::Region}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - "ssm.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2InstanceRole

# Fn::GetAtt for Firewall do not return VPCE Id in ordered format.
# For more details refer to: https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
# Until the bug is fixed we have to rely on custom resource to retrieve AZ specific VPCE Id.

# Lambda Role:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Egress-AnfwLambdaRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt RetrieveVpcIdLogGroup.Arn
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource: "*"

# Retrieve VpceId Lambda Custom Resource:
  RetrieveVpcIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub "/EgressWorkshop/Lambda/RetrieveVpceId-${AWS::Region}"
        RetentionInDays: 1

  RetrieveVpceId:
    Type: AWS::Lambda::Function
    DependsOn: RetrieveVpcIdLogGroup
    Properties:
      FunctionName: !Sub "Fw-RetrieveVpceId-${AWS::StackName}"
      Handler: "index.handler"
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              responseData = {}
              responseStatus = cfnresponse.FAILED
              logger.info('Received event: {}'.format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
              if event["RequestType"] == "Create":
                  try:
                      Az1 = event["ResourceProperties"]["Az1"]
                      FwArn = event["ResourceProperties"]["FwArn"]
                  except Exception as e:
                      logger.info('AZ retrieval failure: {}'.format(e))
                  try:
                      nfw = boto3.client('network-firewall')
                  except Exception as e:
                      logger.info('boto3.client failure: {}'.format(e))
                  try:
                      NfwResponse=nfw.describe_firewall(FirewallArn=FwArn)
                      VpceId1 = NfwResponse['FirewallStatus']['SyncStates'][Az1]['Attachment']['EndpointId']

                  except Exception as e:
                      logger.info('ec2.describe_firewall failure: {}'.format(e))

                  responseData['FwVpceId1'] = VpceId1
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.7
      Timeout: 30

  FirewallVpceIds:
    Type: Custom::DescribeVpcEndpoints
    Properties:
      ServiceToken: !GetAtt RetrieveVpceId.Arn
      Az1: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      FwArn: !Ref EgressVPCFirewall

# Testing Security Group:
  SubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ICMP acess from 10.0.0.0/8"
      GroupName: "EgressVPC-TestInstance-Sg1"
      VpcId: !Ref EgressVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: "EgressVPC-TestInstance-Sg1"

  
      
# AWS Network Firewall:
  # Inspection Firewall Rule Groups:
  DomainAllowStatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: EgressWorkshop-DomainAllow-RuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: "STRICT_ORDER"
        RuleVariables: {}
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - HTTP_HOST
              - TLS_SNI
            Targets:
              - ".amazon.com"
              - ".amazonaws.com"
            GeneratedRulesType: "ALLOWLIST"
      Tags:
        - Key: Name
          Value: EgressWorkshop-DomainAllow-RuleGroup

  #Egress Firewall Policy:
  EgressFirewallPolicy:
    DependsOn: DomainAllowStatefulRuleGroup
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: EgressWorkshop-InspectionFirewall-Policy
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulEngineOptions:
          RuleOrder: "STRICT_ORDER"

          
      Tags:
        - Key: Name
          Value: EgressWorkshop-InspectionFirewall-Policy

  #Egress Firewall:
  EgressVPCFirewall:
    DependsOn: DomainAllowStatefulRuleGroup
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: EgressWorkshop-InspectionFirewall
      FirewallPolicyArn: !Ref EgressFirewallPolicy
      VpcId: !Ref EgressVPC
      SubnetMappings:
        - SubnetId: !Ref FirewallSubnet1
      Tags:
        - Key: Name
          Value: EgressWorkshop-InspectionFirewall  

  #Egress Firewall Logging:
  EgressVPCFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/EgressWorkshop/Anfw/Flow"

  EgressVPCFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/EgressWorkshop/Anfw/Alert"

  EgressVPCFirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref EgressVPCFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressVPCFirewallLogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressVPCFirewallLogAlertGroup

# Private Route Tables:
  PrivateRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-PrivateRouteTable1

  PrivateRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRtb1
      SubnetId: !Ref PrivateSubnet1

#  PrivateRtb1DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      DestinationCidrBlock: "0.0.0.0/0"
#      NatGatewayId: !Ref NatGw1
#      RouteTableId: !Ref PrivateRtb1

  PrivateRtb1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PrivateRtb1


# Public Route Tables:
  PublicRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-PublicRouteTable1

  PublicRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRtb1
      SubnetId: !Ref PublicSubnet1

  PublicRtb1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: EgressGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EgressInternetGateway
      RouteTableId: !Ref PublicRtb1

  PublicRtb1FwReturn:
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.0.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1

# Firewall Route Tables:
  FirewallRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-FirewallRouteTable1

  FirewallRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallRtb1
      SubnetId: !Ref FirewallSubnet1

  FirewallRtb1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGw1
      RouteTableId: !Ref FirewallRtb1

# Test Instances - for egress tests:
  TestInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateRtb1DefaultRoute
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Scanner_Install:
            - configure_scanner
        configure_scanner:
          commands:
            download:
              cwd: /usr/bin
              command: !Sub "aws s3 cp s3://${MyAssetsBucketName}/${MyAssetsBucketPrefix}egress-check.sh /usr/bin/"
#            addtargetcmd:
#              env:
#                SCANTARG: !Sub "${EgressIP}"
#              cwd: /usr/bin
#              command: "[ -f /usr/bin/egress-check.sh ] && chmod 755 /usr/bin/egress-check.sh || true"
          files:
            /usr/bin/testegress:
              mode: "000755"
              content: !Sub |
                #!/bin/bash
                #Script to trigger egress-check.sh
                TESTIP=${EgressIP}
                bash /usr/bin/egress-check.sh $TESTIP           
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnet1
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref SubnetSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: ProtectedSubnet-TestInstance1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          amazon-linux-extras install epel -y
          yum install knot-utils -y 
          yum install samba-client -y
          yum install nc -y
          yum install ftp -y
          amazon-linux-extras enable python3
          yum install -y python3 --disablerepo amzn2-core
          yum install -y curl git python-pip
          echo "${EgressIP} testhost.aws" >> /etc/hosts
          aws s3 cp s3://${MyAssetsBucketName}/${MyAssetsBucketPrefix}flightsim_2.3.0_linux_64-bit.rpm /tmp
          yum install -y /tmp/flightsim_2.3.0_linux_64-bit.rpm
          /usr/bin/aws configure set region ${AWS::Region}
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TestInstance1 --configsets Scanner_Install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource TestInstance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M  
Outputs:
  TestHostSession:
    Description: Start interactive shell on ProtectedSubnet-TestInstance1
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${TestInstance1}?region=${AWS::Region}
  R53DNSFWConsole:
    Description: link to Route 53 Resolver DNS Firewall Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#DNSFirewallRuleGroups:"
  ANFWConsole:
    Description: link to AWS Network Firewall Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#NetworkFirewalls:"
  ANFWAlertLog:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/EgressWorkshop/Anfw/Alert"
    Description: ANFW Alert Logs

