AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for Tutorial - Install a LAMP Web Server on Amazon Linux 2
Parameters:
  LatestAmazonLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Mappings:
  PartitionMap:
    aws:
      ec2serviceprincipal: ec2.amazonaws.com
    aws-cn:
      ec2serviceprincipal: ec2.amazonaws.com.cn
Resources:
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - !FindInMap [ PartitionMap, !Ref AWS::Partition, ec2serviceprincipal]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Join [ '' , [ 'arn:', !Ref AWS::Partition, ':iam::aws:policy/AmazonSSMManagedInstanceCore' ] ]
      Path: '/'
      Policies:
        - PolicyName: putParameter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allows access to Parameter Store parameters specific to the tutorial
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: !Join [ '', [ 'arn:', !Ref AWS::Partition, ':ssm:*:*:parameter/Tutorials/Passwords/AL2/*' ] ]
  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref ManagedInstanceRole
      InstanceProfileName: ManagedInstanceProfileLAMPAL2
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
  SubnetNetworkAclAssociationPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group created for AWS-InstallLAMPWebServer'
      GroupName: Automation-LAMPStack-AL2-HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
      VpcId: !Ref VPC
  LinuxEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref LatestAmazonLinuxAmiId
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'
          SubnetId:
            Ref: 'SubnetPublic'
      IamInstanceProfile: !Ref ManagedInstanceProfile
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2
Outputs:
  TemplateID:
    Description: 'Template id.'
    Value: 'vpc'
  SubnetPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublic'
