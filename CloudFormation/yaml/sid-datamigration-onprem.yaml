AWSTemplateFormatVersion: 2010-09-09
Description: Storage Immersion Day - DataSync Workshop - NFS Migration - On-Premises Region

Parameters:
  # userId:
  #   Description: Name or alias to identify the IM Day participant
  #   Type: String
  SidSubnet:
    Description: Subnet ID to use for the EC2 resources
    Type: 'AWS::EC2::Subnet::Id'
  SidSecurityGroup:
    Description: Security Group ID to use for the EC2 resources
    Type: String
  LinuxAmi:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  FgwAmi:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/storagegateway/ami/FILE_S3/latest'
  DsAmi:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/datasync/ami'

Resources:
  NfsServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NfsServerIamRole
  NfsServerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  NfsServerRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::aft-vbi-pds
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3:::aft-vbi-pds/*
        Version: '2012-10-17'
      PolicyName: policy
      Roles:
        - !Ref NfsServerIamRole
  NfsServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /opt/aws/cfn/initdata.sh:
              content: !Sub |
                #!/bin/bash
                mkdir -p /media/data/images
                for i in {00001..00200}; do
                  aws s3 cp s3://aft-vbi-pds/bin-images/$i.jpg /media/data/images/ >> /tmp/sync
                done
                echo "/media/data *(rw,no_root_squash)" > /tmp/exports
                sudo cp /tmp/exports /etc/exports
                sudo service nfs restart
          commands:
            1-initData:
              command: "bash /opt/aws/cfn/initdata.sh"
            2-finishUp:
              command: !Sub "/opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackId} --resource NfsServer --region ${AWS::Region}"
    Properties:
      ImageId: !Ref LinuxAmi
      InstanceType: t2.micro
      IamInstanceProfile: !Ref NfsServerInstanceProfile
      Tags:
        - Key: Name
          Value: 'SID-nfs-server'
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SidSecurityGroup
          SubnetId: !Ref SidSubnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r NfsServer --region ${AWS::Region}

  AppServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LinuxAmi
      InstanceType: t2.micro
      IamInstanceProfile: !Ref NfsServerInstanceProfile
      Tags:
        - Key: Name
          Value: 'SID-appserver'
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SidSecurityGroup
          SubnetId: !Ref SidSubnet
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "sudo mkdir /mnt/data\n"


  DataSyncAgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref DataSyncAgentIamRole
  DataSyncAgentIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
  DataSyncAgentRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - datasync:*
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - '*'
        Version: '2012-10-17'
      PolicyName: policy
      Roles:
        - !Ref DataSyncAgentIamRole
  DataSyncAgent:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref DsAmi
      InstanceType: m5.2xlarge
      IamInstanceProfile: !Ref DataSyncAgentInstanceProfile
      Tags:
        - Key: Name
          Value: 'SID-datasync-agent'
      InstanceInitiatedShutdownBehavior: stop
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 80
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SidSecurityGroup
          SubnetId: !Ref SidSubnet

  FileGatewayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref FileGatewayIamRole
  FileGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
  FileGatewayRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - storagegateway:*
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - '*'
        Version: '2012-10-17'
      PolicyName: policy
      Roles:
        - !Ref FileGatewayIamRole
  FileGateway:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref FgwAmi
      InstanceType: c4.2xlarge
      IamInstanceProfile: !Ref FileGatewayInstanceProfile
      Tags:
        - Key: Name
          Value: 'SID-filegateway'
      InstanceInitiatedShutdownBehavior: stop
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 80
            DeleteOnTermination: true
            VolumeType: gp2
        - DeviceName: /dev/xvdc
          Ebs:
            VolumeSize: 300
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SidSecurityGroup
          SubnetId: !Ref SidSubnet

Outputs:
  NfsServerPrivateIP:
    Description: NFS Server Private IP Address
    Value: !GetAtt NfsServer.PrivateIp
  AppServerPrivateIP:
    Description: Application Server Private IP Address
    Value: !GetAtt AppServer.PrivateIp
  DataSyncAgentPublicIP:
    Description: DataSync Agent Public IP Address
    Value: !GetAtt DataSyncAgent.PublicIp
  FileGatewayPublicIP:
    Description: File Gateway Public IP Address
    Value: !GetAtt FileGateway.PublicIp