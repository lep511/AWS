Resources:
  cdklambdaroleD410F7DF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: cdk-lambda-role
    Metadata:
      aws:cdk:path: macie-blog/cdk-lambda-role/Resource
  cdklambdaroleDefaultPolicyE1EC7D56:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ArchivalBlogResults9F8AF807
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ArchivalBlogResults9F8AF807
                        - Arn
                    - /*
          - Action:
              - s3:ListBucket
              - s3:PutObjectTagging
              - s3:PutLifecycleConfiguration
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ArchivalBlogA2A218CA
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ArchivalBlogA2A218CA
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: cdklambdaroleDefaultPolicyE1EC7D56
      Roles:
        - Ref: cdklambdaroleD410F7DF
    Metadata:
      aws:cdk:path: macie-blog/cdk-lambda-role/DefaultPolicy/Resource
  MacieLambda9833E081:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import urllib.parse

          print("Loading Function")

          """Initialise boto3"""
          s3 = boto3.client('s3')
          s3_obj = boto3.client('s3')
          s3_lc = boto3.resource('s3')

          def handler(event, context):
              """
                 Lambda handler.
              """

              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')

              try:

                  response = s3.get_object(Bucket=bucket, Key=key)
                  print("CONTENT TYPE: " + response['ContentType'])

                  s3_clientobj = response
                  s3_clientdata = s3_clientobj['Body'].read().decode('utf-8')

                  print("type of the file is:")
                  print(type(s3_clientdata))
                  s3clientlist = json.loads(s3_clientdata)
                  print("json loaded data")

                  print("printing the severity:")
                  sev = s3clientlist["detail"]["severity"]["score"]
                  print(sev)

                  print("printing the bucket:")
                  buc = s3clientlist["detail"]["resourcesAffected"]["s3Bucket"]["name"]
                  print(buc)

                  print("printing the object:")
                  obj = s3clientlist["detail"]["resourcesAffected"]["s3Object"]["key"]
                  print(obj)

                  lifecycle_config_settings = {'Rules': [{'Filter': {'Prefix': obj}, 'Status': 'Enabled',
                                                          'NoncurrentVersionTransitions': [
                                                              {'NoncurrentDays': 700, 'StorageClass': 'GLACIER'}, ],
                                                          'NoncurrentVersionExpiration': {'NoncurrentDays': 3000}}, ]}
                  if sev == 3:
                      response = s3_obj.put_object_tagging(
                          Bucket=buc,
                          Key=obj,
                          Tagging={
                              'TagSet': [
                                  {
                                      'Key': 'Sensitivity',
                                      'Value': 'High'
                                  }
                              ]
                          }
                      )
                      s3.put_bucket_lifecycle_configuration(Bucket=buc, LifecycleConfiguration=lifecycle_config_settings)

              except Exception as e:
                  print(e)
                  print(
                      'Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(
                          key, bucket))
                  raise e
      FunctionName: macie-blog
      MemorySize: 128
      Description: Apply lifecycle policies and object tags to sensitive data
      Role:
        Fn::GetAtt:
          - cdklambdaroleD410F7DF
          - Arn
      Handler: index.handler
      Runtime: python3.8
    DependsOn:
      - cdklambdaroleDefaultPolicyE1EC7D56
      - cdklambdaroleD410F7DF
    Metadata:
      aws:cdk:path: macie-blog/MacieLambda/Resource
      aws:asset:path: asset.a94ec5efea9a4dd5fa806073981da1cd66a0ce9097cda24ab6381330c6f3341f
      aws:asset:property: Code
  ArchivalBlogA2A218CA:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ""
          - - archival-blog-
            - Ref: AWS::AccountId
            - -eu-west-1
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: macie-blog/ArchivalBlog/Resource
  ArchivalBlogResults9F8AF807:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ""
          - - archival-blog-results-
            - Ref: AWS::AccountId
            - -eu-west-1
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: macie-blog/ArchivalBlogResults/Resource
  ArchivalBlogResultsNotifications07B82E04:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: ArchivalBlogResults9F8AF807
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - MacieLambda9833E081
                - Arn
    DependsOn:
      - ArchivalBlogResultsAllowBucketNotificationsTomacieblogMacieLambda80538AFD64C26542
    Metadata:
      aws:cdk:path: macie-blog/ArchivalBlogResults/Notifications/Resource
  ArchivalBlogResultsAllowBucketNotificationsTomacieblogMacieLambda80538AFD64C26542:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - MacieLambda9833E081
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - ArchivalBlogResults9F8AF807
          - Arn
    Metadata:
      aws:cdk:path: macie-blog/ArchivalBlogResults/AllowBucketNotificationsTomacieblogMacieLambda80538AFD
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: macie-blog/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: macie-blog/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // eslint-disable-next-line max-len
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error message as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: macie-blog/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  firehoseroleDDC4CF0E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: macie-blog/firehose-role/Resource
  firehoseroleDefaultPolicy3F3F850D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ArchivalBlogResults9F8AF807
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ArchivalBlogResults9F8AF807
                        - Arn
                    - /*
          - Action: logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:eu-west-1:"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/kinesisfirehose/MacieResultsFirehose:log-stream:*
        Version: "2012-10-17"
      PolicyName: firehoseroleDefaultPolicy3F3F850D
      Roles:
        - Ref: firehoseroleDDC4CF0E
    Metadata:
      aws:cdk:path: macie-blog/firehose-role/DefaultPolicy/Resource
  MacieResultsFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt:
            - ArchivalBlogResults9F8AF807
            - Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: /aws/kinesisfirehose/MacieResultsFirehose
          LogStreamName: events-stream
        ErrorOutputPrefix: err_bkp_2020
        Prefix: bkp_2020
        RoleARN:
          Fn::GetAtt:
            - firehoseroleDDC4CF0E
            - Arn
    Metadata:
      aws:cdk:path: macie-blog/MacieResultsFirehose
  MacieResultsFirehoseEventsRoleB28CB127:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: macie-blog/MacieResultsFirehose/EventsRole/Resource
  MacieResultsFirehoseEventsRoleDefaultPolicy1685AB74:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MacieResultsFirehose
                - Arn
        Version: "2012-10-17"
      PolicyName: MacieResultsFirehoseEventsRoleDefaultPolicy1685AB74
      Roles:
        - Ref: MacieResultsFirehoseEventsRoleB28CB127
    Metadata:
      aws:cdk:path: macie-blog/MacieResultsFirehose/EventsRole/DefaultPolicy/Resource
  MacieEventsRule7521559C:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail-type:
          - Macie Finding
        source:
          - aws.macie
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - MacieResultsFirehose
              - Arn
          Id: Target0
          RoleArn:
            Fn::GetAtt:
              - MacieResultsFirehoseEventsRoleB28CB127
              - Arn
    Metadata:
      aws:cdk:path: macie-blog/MacieEventsRule/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE02OwU4DMQxEv6V3rwvqAXoDijivtl8QUrc1u0kkOylaRfl3khQkTjOjsUfvEfd7fNi8mG8d7GneZhuEMB+jsTO8qlKs9sL+AhNpSGIJDsFrlGQjHM5+NGIcRZIW/k4KtLnMxmGewkK9azqGhe3a/7orsBj3eTKYP5K3kYNv3X8/kjhWramA7gbTiBQ7WM2Y35KdqZPcXYGZPSnrmYWuQQlr9U4L30jWYxQyDuhGvo7kKf2iVS2lwLjGa/DbHT7j0+ZLmQdJPrIjnO76A97545ktAQAA
    Metadata:
      aws:cdk:path: macie-blog/CDKMetadata/Default
