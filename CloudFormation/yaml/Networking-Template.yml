'AWSTemplateFormatVersion': '2010-09-09'
'Description': 'Networking template'
'Parameters':
  'VpcCIDR':
    'Description': 'Please enter the IP range (CIDR notation) for this VPC'
    'Type': 'String'
    'Default': '10.60.0.0/16'
  'PublicSubnet1CIDR':
    'Description': 'Please enter the IP range (CIDR notation) for the public subnet
      in the first Availability Zone'
    'Type': 'String'
    'Default': '10.60.0.0/24'
  'PublicSubnet2CIDR':
    'Description': 'Please enter the IP range (CIDR notation) for the public subnet
      in the second Availability Zone'
    'Type': 'String'
    'Default': '10.60.1.0/24'
  'PrivateSubnet1CIDR':
    'Description': 'Please enter the IP range (CIDR notation) for the private subnet
      in the first Availability Zone'
    'Type': 'String'
    'Default': '10.60.3.0/24'
  'PrivateSubnet2CIDR':
    'Description': 'Please enter the IP range (CIDR notation) for the private subnet
      in the second Availability Zone'
    'Type': 'String'
    'Default': '10.60.4.0/24'
  'SourceCidr':
    'Default': '0.0.0.0/0'
    'Description': 'Optional - CIDR/IP range for instance ssh/http access and load
      balancer http access'
    'Type': 'String'
'Resources':
  'VPC':
    'Type': 'AWS::EC2::VPC'
    'Properties':
      'CidrBlock': '10.60.0.0/16'
      'EnableDnsHostnames': !!bool 'true'
      'EnableDnsSupport': !!bool 'true'
      'Tags':
      - 'Key': 'Name'
        'Value': 'VPC'
  'InternetGateway':
    'Type': 'AWS::EC2::InternetGateway'
    'Properties':
      'Tags':
      - 'Key': 'Name'
        'Value': 'InternetGateway'
  'AttachGateway':
    'Type': 'AWS::EC2::VPCGatewayAttachment'
    'Properties':
      'InternetGatewayId':
        'Ref': 'InternetGateway'
      'VpcId':
        'Ref': 'VPC'
  'PublicSubnet1':
    'Type': 'AWS::EC2::Subnet'
    'DependsOn': 'AttachGateway'
    'Properties':
      'AvailabilityZone':
        'Fn::Select':
        - !!int '0'
        - 'Fn::GetAZs':
            'Ref': 'AWS::Region'
      'CidrBlock':
        'Ref': 'PublicSubnet1CIDR'
      'MapPublicIpOnLaunch': !!bool 'true'
      'Tags':
      - 'Key': 'Name'
        'Value': 'PublicSubnet1'
      'VpcId':
        'Ref': 'VPC'
  'PublicSubnet2':
    'Type': 'AWS::EC2::Subnet'
    'DependsOn': 'AttachGateway'
    'Properties':
      'AvailabilityZone':
        'Fn::Select':
        - !!int '1'
        - 'Fn::GetAZs':
            'Ref': 'AWS::Region'
      'CidrBlock':
        'Ref': 'PublicSubnet2CIDR'
      'MapPublicIpOnLaunch': !!bool 'true'
      'Tags':
      - 'Key': 'Name'
        'Value': 'PublicSubnet2'
      'VpcId':
        'Ref': 'VPC'
  'PrivateSubnet1':
    'Type': 'AWS::EC2::Subnet'
    'DependsOn': 'AttachGateway'
    'Properties':
      'AvailabilityZone':
        'Fn::Select':
        - !!int '0'
        - 'Fn::GetAZs':
            'Ref': 'AWS::Region'
      'CidrBlock':
        'Ref': 'PrivateSubnet1CIDR'
      'Tags':
      - 'Key': 'Name'
        'Value': 'PrivateSubnet1'
      'VpcId':
        'Ref': 'VPC'
  'PrivateSubnet2':
    'Type': 'AWS::EC2::Subnet'
    'DependsOn': 'AttachGateway'
    'Properties':
      'AvailabilityZone':
        'Fn::Select':
        - !!int '1'
        - 'Fn::GetAZs':
            'Ref': 'AWS::Region'
      'CidrBlock':
        'Ref': 'PrivateSubnet2CIDR'
      'Tags':
      - 'Key': 'Name'
        'Value': 'PrivateSubnet2'
      'VpcId':
        'Ref': 'VPC'
  'PublicRouteTable':
    'Type': 'AWS::EC2::RouteTable'
    'DependsOn':
    - 'PublicSubnet1'
    - 'PublicSubnet2'
    'Properties':
      'Tags':
      - 'Key': 'Name'
        'Value': 'Public Route Table'
      'VpcId':
        'Ref': 'VPC'
  'PrivateRouteTable':
    'Type': 'AWS::EC2::RouteTable'
    'DependsOn':
    - 'PrivateSubnet1'
    - 'PrivateSubnet2'
    'Properties':
      'VpcId':
        'Ref': 'VPC'
      'Tags':
      - 'Key': 'Name'
        'Value': 'Private Route Table'
  'PublicRoute':
    'Type': 'AWS::EC2::Route'
    'Properties':
      'DestinationCidrBlock': '0.0.0.0/0'
      'GatewayId':
        'Ref': 'InternetGateway'
      'RouteTableId':
        'Ref': 'PublicRouteTable'
  'PrivateRoute':
    'Type': 'AWS::EC2::Route'
    'Properties':
      'DestinationCidrBlock': '0.0.0.0/0'
      'NatGatewayId':
        'Ref': 'NATGateway'
      'RouteTableId':
        'Ref': 'PrivateRouteTable'
  'PublicSubnet1RouteTableAssociation':
    'Type': 'AWS::EC2::SubnetRouteTableAssociation'
    'DependsOn':
    - 'PublicRoute'
    'Properties':
      'RouteTableId':
        'Ref': 'PublicRouteTable'
      'SubnetId':
        'Ref': 'PublicSubnet1'
  'PublicSubnet2RouteTableAssociation':
    'Type': 'AWS::EC2::SubnetRouteTableAssociation'
    'DependsOn':
    - 'PublicRoute'
    'Properties':
      'RouteTableId':
        'Ref': 'PublicRouteTable'
      'SubnetId':
        'Ref': 'PublicSubnet2'
  'PrivateSubnet1RouteTableAssociation':
    'Type': 'AWS::EC2::SubnetRouteTableAssociation'
    'DependsOn':
    - 'PrivateRoute'
    'Properties':
      'RouteTableId':
        'Ref': 'PrivateRouteTable'
      'SubnetId':
        'Ref': 'PrivateSubnet1'
  'PrivateSubnet2RouteTableAssociation':
    'Type': 'AWS::EC2::SubnetRouteTableAssociation'
    'DependsOn':
    - 'PrivateRoute'
    'Properties':
      'RouteTableId':
        'Ref': 'PrivateRouteTable'
      'SubnetId':
        'Ref': 'PrivateSubnet2'
  'EIPNATGateway':
    'Type': 'AWS::EC2::EIP'
    'DependsOn':
    - 'AttachGateway'
    - 'VPC'
    'Properties':
      'Domain': 'VPC'
  'NATGateway':
    'Type': 'AWS::EC2::NatGateway'
    'DependsOn':
    - 'PublicSubnet1RouteTableAssociation'
    'Properties':
      'AllocationId':
        'Fn::GetAtt': 'EIPNATGateway.AllocationId'
      'SubnetId':
        'Ref': 'PublicSubnet1'
  'LoadBalancerSecurityGroup':
    'Type': 'AWS::EC2::SecurityGroup'
    'Properties':
      'GroupName': 'LBSecurityGroup'
      'GroupDescription': 'Allow all traffic from internet'
      'SecurityGroupIngress':
      - 'CidrIp':
          'Ref': 'SourceCidr'
        'IpProtocol': '-1'
      'VpcId':
        'Ref': 'VPC'
      'Tags':
      - 'Key': 'Name'
        'Value': 'LoadBalancerSG'
  'EC2InstanceSecurityGroup':
    'Type': 'AWS::EC2::SecurityGroup'
    'Properties':
      'GroupName': 'EC2InstanceSecurityGroup'
      'GroupDescription': 'Allow traffic from ALB'
      'VpcId':
        'Ref': 'VPC'
      'SecurityGroupIngress':
      - 'SourceSecurityGroupId':
          'Ref': 'LoadBalancerSecurityGroup'
        'IpProtocol': 'TCP'
        'FromPort': !!int '80'
        'ToPort': !!int '80'
      - 'IpProtocol': 'TCP'
        'FromPort': !!int '8443'
        'ToPort': !!int '8443'
        'SourceSecurityGroupId':
          'Ref': 'LoadBalancerSecurityGroup'
      'Tags':
      - 'Key': 'Name'
        'Value': 'InstanceSG'
  'DBInstanceSecurityGroup':
    'Type': 'AWS::EC2::SecurityGroup'
    'Properties':
      'GroupName': 'DBInstanceSecurityGroup'
      'GroupDescription': 'Allow traffic from EC2 instance'
      'VpcId':
        'Ref': 'VPC'
      'SecurityGroupIngress':
      - 'SourceSecurityGroupId':
          'Ref': 'EC2InstanceSecurityGroup'
        'FromPort': !!int '3306'
        'ToPort': !!int '3306'
        'IpProtocol': 'TCP'
      'Tags':
      - 'Key': 'Name'
        'Value': 'RDSSG'
  'DBSubnetGroup':
    'Type': 'AWS::RDS::DBSubnetGroup'
    'Properties':
      'DBSubnetGroupDescription': 'Subnet Group for the Aurora Cluster'
      'SubnetIds':
      - 'Ref': 'PrivateSubnet1'
      - 'Ref': 'PrivateSubnet2'
  'DBSecurityGroup':
    'Type': 'AWS::EC2::SecurityGroup'
    'Properties':
      'GroupDescription': 'Security Group for the Aurora Cluster'
      'SecurityGroupIngress':
      - 'IpProtocol': 'tcp'
        'FromPort': !!int '3306'
        'ToPort': !!int '3306'
        'CidrIp':
          'Ref': 'VpcCIDR'
      'VpcId':
        'Ref': 'VPC'
'Outputs':
  'VPC':
    'Value':
      'Ref': 'VPC'
    'Description': 'Exporting VPC Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-VPC'
  'PublicSubnet1':
    'Value':
      'Ref': 'PublicSubnet1'
    'Description': 'Exporting PublicSubnet1 Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-PublicSubnet1'
  'PublicSubnet2':
    'Value':
      'Ref': 'PublicSubnet2'
    'Description': 'Exporting PublicSubnet2 Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-PublicSubnet2'
  'PrivateSubnet1':
    'Value':
      'Ref': 'PrivateSubnet1'
    'Description': 'Exporting PrivateSubnet1 Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-PrivateSubnet1'
  'PrivateSubnet2':
    'Value':
      'Ref': 'PrivateSubnet2'
    'Description': 'Exporting PrivateSubnet2 Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-PrivateSubnet2'
  'LoadBalancerSecurityGroup':
    'Value':
      'Ref': 'LoadBalancerSecurityGroup'
    'Description': 'Exporting LoadBalancerSecurityGroup Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-LoadBalancerSecurityGroup'
  'EC2InstanceSecurityGroup':
    'Value':
      'Ref': 'EC2InstanceSecurityGroup'
    'Description': 'Exporting EC2InstanceSecurityGroup Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-EC2InstanceSecurityGroup'
  'DBSubnetGroup':
    'Value':
      'Ref': 'DBSubnetGroup'
    'Description': 'Exporting DBSubnetGroup Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-DBSubnetGroup'
  'DBSecurityGroup':
    'Value':
      'Ref': 'DBSecurityGroup'
    'Description': 'Exporting DBSecurityGroup Resource ID'
    'Export':
      'Name':
        'Fn::Sub': '${AWS::StackName}-DBSecurityGroup'
'Rules': {}