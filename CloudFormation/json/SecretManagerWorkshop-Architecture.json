{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template multi-tier-web-app-in-vpc.template: Sample template showing how to create a multi-tier web application in a VPC with multiple subnets. The first subnet is public and contains and internet facing load balancer, a NAT gw for internet access from the private subnet. The second subnet is private and contains a Frontend fleet of EC2 instances, an internal load balancer and a Backend fleet of EC2 instances. **WARNING** This template creates Elastic Load Balancers and Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    
    "EnableConfig": {
      "Description": "Enable Config",
      "Default": "Y",
      "Type": "String",
      "AllowedValues": [
        "Y",
        "N"
      ],
      "ConstraintDescription": "Must specify Y/N"
    },

    "FrontendInstanceType" : {
      "Description" : "Frontend Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.medium","m5.small","m5.medium","m5.large","m5.xlarge","m5.xlarge","m5.2xlarge","m5.4xlarge","m3.xlarge","m3.2xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    
    "LatestAmiId":{
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },

    "FrontendSize" : {
      "Description" : "Number of EC2 instances to launch for the Frontend server",
      "Type" : "Number",
      "Default" : "1"
    },

    "BackendInstanceType" : {
      "Description" : "Backend Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.medium","m5.small","m5.medium","m5.large","m5.xlarge","m5.xlarge","m5.2xlarge","m5.4xlarge","m3.xlarge","m3.2xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description": "(Optional) Provides the name of the EC2 key pair",
      "Type": "String",
      "Default" : ""
    },
    
    "BackendSize" : {
      "Description" : "Number of EC2 instances to launch for the backend server",
      "Type" : "Number",
      "Default" : "1"
    },
  
    "DBName" : {
      "Description" : "Database name",
      "Type" : "String",
      "Default" : "ProductionDB"
    },    

    "MultiAZDatabase" : {
      "Description" : "is Highly available",
      "Type" : "String",
      "Default" : "False"
    },

    "DBClass" : {
      "Description" : "DB instance class determines the computation and memory capacity ",
      "Type" : "String",
      "Default" : "db.t4g.small"
    },

    "DBAllocatedStorage" : {
      "Description" : "The size of the database (GiB)",
      "Type" : "Number",
      "Default" : "40"
    }

  },
  
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]},
    "EnableConfig": {"Fn::Equals":[{"Ref": "EnableConfig"},"Y"]}
  },

  "Mappings" : {

    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "Public"  : { "CIDR" : "10.0.0.0/24" },
      "Private" : { "CIDR" : "10.0.1.0/24" }
    }
  },

  "Resources" : {

    "ConfigBucket": {
      "DeletionPolicy": "Delete",
      "Type": "AWS::S3::Bucket",
      "Properties":{
        "AccessControl": "Private",
        "BucketEncryption":{
          "ServerSideEncryptionConfiguration":[
          {
            "ServerSideEncryptionByDefault":{
              "SSEAlgorithm": "AES256"
            }
          }
          ]
        },
        "PublicAccessBlockConfiguration":{
          "BlockPublicAcls": true,
          "BlockPublicPolicy":true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "OwnershipControls":{
          "Rules":[
          {
            "ObjectOwnership": "ObjectWriter"
          }
          ]
        }
      }
    },
    
    "ConfigBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Condition": "EnableConfig",    
        "Properties": {
            "Bucket": {
                "Ref": "ConfigBucket"
            },
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "AWSConfigBucketPermissionsCheck",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": "s3:GetBucketAcl",
                        "Resource": [
                            {
                                "Fn::Sub": "arn:${AWS::Partition}:s3:::${ConfigBucket}"
                            }
                        ]
                    },
                    {
                        "Sid": "AWSConfigBucketDelivery",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": "s3:PutObject",
                        "Resource": [
                            {
                                "Fn::Sub": "arn:${AWS::Partition}:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*"
                            }
                        ]
                    }
                ]
            }
        }
    },
    
    "ConfigRecorderRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Path": "/",
            "ManagedPolicyArns": [
                {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWS_ConfigRole"
                }
            ]
        }
    },
    
    "ConfigRecorder": {
        "Type": "AWS::Config::ConfigurationRecorder",
        "Condition": "EnableConfig",
        "Properties": {
            "RoleARN": {
                "Fn::GetAtt": [
                    "ConfigRecorderRole",
                    "Arn"
                ]
            },
            "RecordingGroup": {
                "AllSupported": "True",
                "IncludeGlobalResourceTypes": "True",
                "ResourceTypes": {"Ref" : "AWS::NoValue"}
            }
        }
    },
    
    "ConfigDeliveryChannel": {
        "Type": "AWS::Config::DeliveryChannel",
        "Condition": "EnableConfig",
        "Properties": {
            "ConfigSnapshotDeliveryProperties": {
                "DeliveryFrequency": "One_Hour"
            },
            "S3BucketName": {
                "Ref": "ConfigBucket"
            }
        }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "EnableDnsSupport": "True",
        "EnableDnsHostnames": "True",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    
    "NAT" : {
     "Type" : "AWS::EC2::NatGateway",
     "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NatEIP", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet"},
        "Tags" : [ {"Key" : "stack", "Value" : "PublicSubnet" } ]
       }
    },
    
    "NatEIP" : {
       "DependsOn" : "GatewayToInternet",
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "VPC"
       }
    },    
   
    "PrivateRoute" : {
       "Type" : "AWS::EC2::Route",
       "Properties" : {
          "RouteTableId" : { "Ref" : "PrivateRouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "NatGatewayId" : { "Ref" : "NAT" }
       }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "PublicElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PublicSubnet" } ],
        "Listeners" : [ { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "90",
          "Timeout" : "60"
        }
      }
    },

    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the VPC",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.0.1.0/24"} ]
      }
    },

    "FrontendFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
        "LaunchTemplate" : { "LaunchTemplateId": {"Ref" : "FrontendServerLaunchConfig"}, "Version": {"Fn::GetAtt":  "FrontendServerLaunchConfig.LatestVersionNumber"  }},
        "MinSize" : "1",
        "MaxSize" : "3",
        "DesiredCapacity" : { "Ref" : "FrontendSize" },
        "LoadBalancerNames" :  [{ "Ref" : "PublicElasticLoadBalancer" }] ,
        "Tags" : [{ "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" }]
      }
    },  

    "FrontendServerLaunchConfig"  : {
      "Type" : "AWS::EC2::LaunchTemplate",
      "Properties" : {
        "LaunchTemplateData" : {
          "ImageId"        : { "Ref" : "LatestAmiId"},
          "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
          "SecurityGroupIds" :  [{ "Fn::GetAtt" : ["FrontendSecurityGroup", "GroupId"] }],
          "InstanceType"   : { "Ref" : "FrontendInstanceType" },
          "IamInstanceProfile" : {"Name": {"Ref": "InstanceProfileSSM"}},
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -v\n",
            "sudo yum update -y\n",
            "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
            "sudo systemctl enable amazon-ssm-agent\n",
            "sudo systemctl start amazon-ssm-agent\n",
            "sudo yum install -y amazon-cloudwatch-agent\n",
            "sudo yum install -y awslogs\n",
            "sudo yum install -y httpd\n",
            "sudo sed -i 's/messages/secure/g' /etc/awslogs/awslogs.conf\n",
            "sudo systemctl start awslogsd\n",
            "sudo systemctl enable awslogsd.service\n",
            "sudo systemctl start httpd\n",
            "sudo systemctl enable httpd\n",
            "sudo mkdir -p /var/www/html/ && sudo touch /var/www/html/index.html\n",
            "sudo echo -e '<h1>Congratulations, this request was served from the frontend fleet</h1>' > /var/www/html/index.html\n",
            "sudo mkdir -p /etc/httpd/conf.d/ && sudo touch /etc/httpd/conf.d/maptobackend.conf\n",
            "sudo echo -e 'ProxyPass /backend http://", { "Fn::GetAtt" : [ "PrivateElasticLoadBalancer", "DNSName" ]}, "' >> /etc/httpd/conf.d/maptobackend.conf\n",
            "sudo echo -e 'ProxyPassReverse /backend http://", { "Fn::GetAtt" : [ "PrivateElasticLoadBalancer", "DNSName" ]}, "' >> /etc/httpd/conf.d/maptobackend.conf\n"
          ]]}}
        }
      }
    },

    "FrontendSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ]
      }
    },


    "PrivateElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PrivateLoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PrivateSubnet" } ],
        "Listeners" : [ { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" } ],
        "Scheme" : "internal",
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "90",
          "Timeout" : "60"
        }
      }
    },

    "PrivateLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Private ELB Security Group with HTTP access on port 80 from the Frontend Fleet only",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "FrontendSecurityGroup" } } ]
      }
    },

    "BackendFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "LaunchTemplate" : { "LaunchTemplateId": {"Ref" : "BackendLaunchConfig"}, "Version": {"Fn::GetAtt":  "BackendLaunchConfig.LatestVersionNumber"  }},
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "BackendSize" },
        "LoadBalancerNames" :  [{ "Ref" : "PrivateElasticLoadBalancer" }] ,
        "Tags" :  [{ "Key" : "Network", "Value" : "Private", "PropagateAtLaunch" : "true" }]
      }
    },

    "BackendLaunchConfig"  : {
      "Type" : "AWS::EC2::LaunchTemplate",
      "Properties" : {
        "LaunchTemplateData" : {
          "ImageId"        : { "Ref" : "LatestAmiId"},
          "SecurityGroupIds" :  [{ "Fn::GetAtt" : ["BackendSecurityGroup", "GroupId"] }] ,
          "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
          "InstanceType"   : { "Ref" : "BackendInstanceType" },
          "IamInstanceProfile" : {"Name": {"Ref": "InstanceProfileSSM"}},
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -v\n",
            "sudo yum update -y\n",
            "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
            "sudo systemctl enable amazon-ssm-agent\n",
            "sudo systemctl start amazon-ssm-agent\n",          
            "sudo yum install -y amazon-cloudwatch-agent\n",
            "sudo yum install -y awslogs\n",
            "sudo yum install -y httpd\n",
            "sudo mkdir -p /var/www/html/ && sudo touch /var/www/html/index.html\n",
            "sudo echo -e '<h1>Congratulations this request was served from the backend fleet</h1>' > /var/www/html/index.html\n",
            "sudo sed -i 's/messages/secure/g' /etc/awslogs/awslogs.conf\n",
            "sudo systemctl start httpd\n",
            "sudo systemctl enable httpd\n",
            "sudo systemctl start awslogsd\n",
            "sudo systemctl enable awslogsd.service\n"
          ]]}}
        }
      }
    },

    "BackendSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from private load balancer as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PrivateLoadBalancerSecurityGroup" } } ]
      }
    },
    
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 3306, "ToPort" : 3306, "SourceSecurityGroupId" : { "Ref" : "BackendSecurityGroup" } }]
      }
    },    
      
    "InstanceProfileSSM" : {
    "Type" : "AWS::IAM::InstanceProfile",
    "Properties" : {
        "Path"  : "/",
        "Roles" : [ {"Ref": "SSMRole"}]
      }
    },
    
    "SSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description" : "Instance profile role for EC2.",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        ]
      }
    },
    
    
    "SecretCMK": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description" : "Secret CMK",
        "Enabled" : "True",
        "EnableKeyRotation" : "True",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement":
          [{
          "Sid": "Allow access for Key Administrators",
          "Effect": "Allow",
          "Principal": { "AWS": [
            {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":root"]]},
            {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":role/",{"Ref":"KMSAdminRole"}]]}
          ]},
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",          
            "kms:Create*",
            "kms:Describe*",
            "kms:Enable*",
            "kms:List*",
            "kms:Put*",
            "kms:Update*",
            "kms:Revoke*",
            "kms:Disable*",
            "kms:Get*",
            "kms:Delete*",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:ScheduleKeyDeletion",
            "kms:CancelKeyDeletion"
          ],
          "Resource": "*"
          },
          {
          "Sid": "Allow use of the key",
          "Effect": "Allow",
          "Principal": {
            "AWS":
            [
              {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":role/",{"Ref":"DevOpsRole"}]]}
            ]
          },
          "Action": [
            "kms:Revoke*",
            "kms:Disable*",
            "kms:Delete*",
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "kms:ViaService": "rds.us-east-1.amazonaws.com"
            }
          }
          }]
        }
      }
    },
    
    "ConfidentialCMK": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description" : "Confidential CMK",
        "Enabled" : "True",
        "EnableKeyRotation" : "True",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement":
          [{
          "Sid": "Allow access for Key Administrators",
          "Effect": "Allow",
          "Principal": { "AWS": [
            {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":root"]]},
            {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":role/",{"Ref":"KMSAdminRole"}]]}
          ]},
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:Create*",
            "kms:Describe*",
            "kms:Enable*",
            "kms:List*",
            "kms:Put*",
            "kms:Update*",
            "kms:Revoke*",
            "kms:Disable*",
            "kms:Get*",
            "kms:Delete*",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:ScheduleKeyDeletion",
            "kms:CancelKeyDeletion"
          ],
          "Resource": "*"
          },
          {
          "Sid": "Allow use of the key with ",
          "Effect": "Allow",
          "Principal": {
            "AWS":
            [
              {"Fn::Join": ["",["arn:aws:iam::",{"Ref": "AWS::AccountId"},":role/",{"Ref":"DevOpsRole"}]]}
            ]
          },
          "Action": [
            "kms:Revoke*",
            "kms:Disable*",
            "kms:Delete*",
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:Describe*"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "kms:ViaService": "rds.us-east-1.amazonaws.com"
            }
          }
          }]
        }
      }
    },
    
   
    "myDBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "PubliclyAccessible": "False",
        "DBName"            : { "Ref" : "DBName" },
        "Engine"            : "MySQL",
        "MultiAZ"           : { "Ref": "MultiAZDatabase" },        
        "MasterUsername"    : {"Fn::Sub": "{{resolve:secretsmanager:${MyRDSSecret}::username}}"},
        "DBInstanceClass"   : { "Ref" : "DBClass" },
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },        
        "MasterUserPassword": {"Fn::Sub": "{{resolve:secretsmanager:${MyRDSSecret}::password}}"},
        "KmsKeyId"          : { "Ref" : "ConfidentialCMK"},
        "StorageEncrypted"  : "True",
        "Tags" : [{ "Key"  : "Name", "Value" : "Master Database" }]
      }
    },



    "DevOpsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description" : "Powerful role for the DevOps Team.",
        "RoleName" : {"Fn::Join": ["",["DevOpsRole-",{"Ref": "AWS::StackName"}]]},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {"Ref": "AWS::AccountId"}
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "DevOpsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "NotAction": [
                    "iam:*",
                    "organizations:*",
                    "account:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:ListRoles",
                    "organizations:DescribeOrganization",
                    "account:ListRegions"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
  
  
    "KMSAdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description" : "Role for the KMS admin Team.",
        "RoleName" : {"Fn::Join": ["",["KMSAdminRole-",{"Ref": "AWS::StackName"}]]},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {"Ref": "AWS::AccountId"}
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "KMSAdminPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:*",
                    "iam:ListRoles",
                    "organizations:DescribeOrganization",
                    "account:ListRegions"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    
    "MyRDSSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": "This secret has a dynamically generated secret password.",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\":\"dbadmin\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "ExcludeCharacters": "\"@/\\"
        },
        "Tags": [
          {
            "Key": "AppName",
            "Value": "myDBInstance"
          }
        ]
      }
    },

    "SecretRDSInstanceAttachment": {
              "Type": "AWS::SecretsManager::SecretTargetAttachment",
              "Properties": {
                  "SecretId": {
                      "Ref": "MyRDSSecret"
                  },
                  "TargetId": {
                      "Ref": "myDBInstance"
                  },
                  "TargetType": "AWS::RDS::DBInstance"
              }
    
    }
  
  },
  

  "Outputs" : {
    "WebSite" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "PublicElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}
