AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'This template creates a VPC with 6 public subnets, an Application Load
  Balancer, an Auto Scaling Group with a Launch Template that uses Spot Instances,
  and a Target Group.

  '
Parameters:
  AmazonLinux2LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  EnvironmentName:
    Type: String
    Default: DefaultASGTemplate
    Description: Name of ASG blueprint
  SpotInstanceType1:
    Type: String
    Default: r7i.2xlarge
    Description: Possible instance type to use for Spot
  SpotInstanceType2:
    Type: String
    Default: c6i.2xlarge
    Description: Possible instance type to use for Spot
  SpotInstanceType3:
    Type: String
    Default: m2.4xlarge
    Description: Possible instance type to use for Spot
  SpotInstanceType4:
    Type: String
    Default: g5g.4xlarge
    Description: Possible instance type to use for Spot
Resources:
  spotBlueprintsEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
  spotBlueprintsEC2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: spotBlueprintsEC2Role
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ3)
  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet4
  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1d
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ4)
  PublicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet5
  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1e
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ5)
  PublicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet6
  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1f
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ6)
  SampleWebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGatewayAttachment
    Properties:
      CapacityRebalance: true
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      - Ref: PublicSubnet3
      - Ref: PublicSubnet4
      - Ref: PublicSubnet5
      - Ref: PublicSubnet6
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: price-capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: SampleWebAppLaunchTemplate
            Version:
              Fn::GetAtt:
              - SampleWebAppLaunchTemplate
              - DefaultVersionNumber
          Overrides:
          - InstanceType:
              Ref: SpotInstanceType1
          - InstanceType:
              Ref: SpotInstanceType2
          - InstanceType:
              Ref: SpotInstanceType3
          - InstanceType:
              Ref: SpotInstanceType4
      TargetGroupARNs:
      - Ref: SampleWebAppTargetGroup
      Tags:
      - Key: Name
        Value: EnvironmentName
        PropagateAtLaunch: true
  SampleWebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: InternetGatewayAttachment
    Properties:
      LaunchTemplateData:
        ImageId:
          Ref: AmazonLinux2LatestAmiId
        SecurityGroupIds:
        - Ref: SampleWebAppEC2SecurityGroup
        UserData:
          Fn::Base64: "#!/bin/bash\nyum update -y\namazon-linux-extras install epel\
            \ -y\nyum -y install httpd jq  \necho \"hello world! \nMy instance-id\
            \ is $(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n\
            My instance type is $(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\
            I'm on Availability Zone $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\"\
            \ > /var/www/html/index.html\nservice httpd start\n"
        IamInstanceProfile:
          Name:
            Ref: spotBlueprintsEC2Profile
  SampleWebAppELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for apache instances
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId:
        Ref: VPC
  SampleWebAppEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for apache instances
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      SecurityGroupIngress:
      - SourceSecurityGroupId:
          Ref: SampleWebAppELBSecurityGroup
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId:
        Ref: VPC
  SampleWebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      SecurityGroups:
      - Ref: SampleWebAppELBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      - Ref: PublicSubnet3
      - Ref: PublicSubnet4
      - Ref: PublicSubnet5
      - Ref: PublicSubnet6
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: routing.http.drop_invalid_header_fields.enabled
        Value: 'true'
  SampleWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: InternetGatewayAttachment
    Properties:
      Port: '80'
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '90'
      - Key: load_balancing.algorithm.type
        Value: least_outstanding_requests
      VpcId:
        Ref: VPC
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: SampleWebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: SampleWebAppTargetGroup
Outputs:
  SampleWebAppLoadBalancerURL:
    Description: URL of the SampleWebAppLoadBalancer
    Value:
      Fn::GetAtt:
      - SampleWebAppLoadBalancer
      - DNSName
