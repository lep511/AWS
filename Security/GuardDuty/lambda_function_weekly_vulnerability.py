# Setting up a weekly vulnerability summary email
# This function will list the top 5 packages with the most critical vulnerabilities 
# and send an email to the SNS topic with the details.

# Policy function:
"""
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "sns:Publish",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "inspector2:ListFindingAggregations",
            "Resource": "*"
        }
    ]
}
"""

import os
import boto3
import json

sns = boto3.client('sns')
inspector2 = boto3.client('inspector2')
SNSTopicARN = os.environ['SNSTopic']

def lambda_handler(event, context):
    response = inspector2.list_finding_aggregations(
        aggregationType="PACKAGE", 
        maxResults=5, 
        aggregationRequest={
            "packageAggregation":{
                "sortOrder": "DESC", 
                "sortBy": "CRITICAL"
            }
        }
    )

    msg = 'Vulnerabilities impacting the most instances and images.\n\n'
    for pkg in response['responses']:
        print(pkg['packageAggregation'])
        msg += 'Package: ' + pkg['packageAggregation']['packageName'] + '\n'
        msg += 'Counts of findings by severity: \n'
        msg += 'Critical = ' + str(pkg['packageAggregation']['severityCounts']['critical']) + '\n'
        msg += 'High = ' + str(pkg['packageAggregation']['severityCounts']['high']) + '\n'
        msg += 'Medium = ' + str(pkg['packageAggregation']['severityCounts']['medium']) + '\n\n'
    
    response = sns.publish(
        TopicArn=SNSTopicARN,
        Subject='Weekly Vulnerability Report',
        Message=msg
    )

    return {
        'statusCode': response['ResponseMetadata']['HTTPStatusCode'],
        'body': json.dumps(response)
    }
