AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for simple-app
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        INVENTORY_TABLE:
          Ref: Inventory
        EVENT_BUS_NAME:
          Ref: StockAppBus
    Layers:
    - Fn::Sub: arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:42
Resources:
  MyWAFACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      CustomResponseBodies:
        CountryNotValid:
          Content: Country not allowed
          ContentType: TEXT_PLAIN
      DefaultAction:
        Block:
          CustomResponse:
            ResponseCode: '403'
            CustomResponseBodyKey: CountryNotValid
      Description: Application WAF
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: AppRules
        SampledRequestsEnabled: true
      Rules:
      - Action:
          Allow: {}
        Name: AllowCountryList
        Priority: 0
        Statement:
          GeoMatchStatement:
            CountryCodes:
            - US
            - UY
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          MetricName: AllowCountryList
          SampledRequestsEnabled: true
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  MyWAFAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGatewayApi}/stages/Prod
      WebACLArn:
        Fn::GetAtt:
        - MyWAFACL
        - Arn
  StockAppBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: StockAppBus
  PurchaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PurchaseFunction
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Policies:
      - EventBridgePutEventsPolicy:
          StatementId: EventBridgePutEventsPolicy
          EventBusName:
            Ref: StockAppBus
      Events:
        AddImage:
          Type: Api
          Properties:
            Path: /purchase
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
    Metadata:
      SamResourceId: PurchaseFunction
  StockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StockFunction
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: Inventory
      Events:
        AddImage:
          Type: Api
          Properties:
            Path: /stock
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
    Metadata:
      SamResourceId: StockFunction
  InventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: InventoryFunction
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Inventory
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: StockAppBus
      Events:
        DeliveryEvents:
          Type: CloudWatchEvent
          Properties:
            EventBusName:
              Ref: StockAppBus
            Pattern:
              source:
              - StockApp
              detail-type:
              - Purchase
              - Replenish
    Metadata:
      SamResourceId: InventoryFunction
  ReplenishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ReplenishFunction
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Inventory
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: StockAppBus
      Events:
        DeliveryEvents:
          Type: CloudWatchEvent
          Properties:
            EventBusName:
              Ref: StockAppBus
            Pattern:
              source:
              - StockApp
              detail-type:
              - StockLevel
    Metadata:
      SamResourceId: ReplenishFunction
  Inventory:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      AttributeDefinitions:
      - AttributeName: Location
        AttributeType: S
      - AttributeName: SKU
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: Location
        KeyType: HASH
      - AttributeName: SKU
        KeyType: RANGE
  DynamoDBItems:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DynamoDBItems
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Inventory
    Metadata:
      SamResourceId: DynamoDBItems
Outputs:
  ApiGatewayEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  TableName:
    Description: Dynamo table name
    Value:
      Ref: Inventory
