AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Create a DynamoDB table and two Lambda functions that can read and write
  to it.
Parameters:
  DynamoDBTableName:
    Type: String
    Description: The name of the DynamoDB table
    Default: SampleTable
Resources:
  AddFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBPutItem
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
  GetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBGetItem
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
  DeleteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBDeletItem
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
  UpdateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBUpdateItem
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Ref: DynamoDBTableName
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  AddFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: AddFunction
      MemorySize: 128
      Timeout: 90
      Role:
        Fn::GetAtt:
        - AddFunctionRole
        - Arn
      Environment:
        Variables:
          DDB_TABLE:
            Ref: DynamoDBTableName
      Events:
        AddMovie:
          Type: Api
          Properties:
            Path: /movie/
            Method: post
    Metadata:
      SamResourceId: AddFunction
  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: GetFunction
      MemorySize: 128
      Timeout: 90
      Role:
        Fn::GetAtt:
        - GetFunctionRole
        - Arn
      Environment:
        Variables:
          DDB_TABLE:
            Ref: DynamoDBTableName
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /movie/{id}
            Method: get
    Metadata:
      SamResourceId: GetFunction
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: DeleteFunction
      MemorySize: 128
      Timeout: 90
      Role:
        Fn::GetAtt:
        - DeleteFunctionRole
        - Arn
      Environment:
        Variables:
          DDB_TABLE:
            Ref: DynamoDBTableName
      Events:
        DeleteMovie:
          Type: Api
          Properties:
            Path: /movie/{id}
            Method: delete
    Metadata:
      SamResourceId: DeleteFunction
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: UpdateFunction
      MemorySize: 128
      Timeout: 90
      Role:
        Fn::GetAtt:
        - UpdateFunctionRole
        - Arn
      Environment:
        Variables:
          DDB_TABLE:
            Ref: DynamoDBTableName
      Events:
        UpdateMovie:
          Type: Api
          Properties:
            Path: /movie/{id}
            Method: put
    Metadata:
      SamResourceId: UpdateFunction
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/movie/
