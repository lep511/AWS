AWSTemplateFormatVersion: '2010-09-09'
Description: Architecting Solutions - Building a Proof of Concept for a Serverless
  Solution
Parameters:
  SNSemail:
    Type: String
    Description: Email address to send SNS notifications to
    Default: sample@site.com
Resources:
  LambdaWriteDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-LambdaWriteDynamoDBPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          Resource:
            Fn::GetAtt:
            - DynamoDBTable
            - Arn
      Roles:
      - Ref: LambdaSQSDynamoDBRole
  LambdaSNSPublishPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-LambdaSNSPublishPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          - sns:ListTopics
          - sns:GetTopicAttributes
          Resource:
            Ref: SNSTopic
      Roles:
      - Ref: LambdaDynamoDBStreamsSNSRole
  LambdaDynamoDBStreamsReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-LambdaDynamoDBStreamsReadPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
          Resource:
            Fn::GetAtt:
            - DynamoDBTable
            - StreamArn
      Roles:
      - Ref: LambdaDynamoDBStreamsSNSRole
  LambdaReadSQSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-LambdaReadSQSPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:ChangeMessageVisibility
          Resource:
            Fn::GetAtt:
            - SQSQueue
            - Arn
      Roles:
      - Ref: LambdaSQSDynamoDBRole
  LambdaSQSDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaSQSDynamoDBRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  LambdaDynamoDBStreamsSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaDynamoDBStreamsSNSRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  APIGatewayToSQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-APIGatewayToSQSRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
  SQSToLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SQSToLambdaFunction
      Handler: index.lambda_handler
      Code:
        ZipFile: "import boto3\nimport uuid\nimport json\nimport logging\nimport os\n\
          \nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nTABLE_NAME\
          \ = os.environ['TABLE_NAME']\n\nclient = boto3.resource('dynamodb')\ntable\
          \ = client.Table(TABLE_NAME)\n\ndef lambda_handler(event, context):\n  \
          \  logger.info('## EVENT')\n    logger.info(event)\n    \n    for record\
          \ in event['Records']:\n        payload = record[\"body\"]\n        logger.info(\"\
          Payload: \" + str(payload))\n        table.put_item(Item= {'orderID': str(uuid.uuid4()),'order':\
          \  payload})\n"
      Role:
        Fn::GetAtt:
        - LambdaSQSDynamoDBRole
        - Arn
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DynamoDBTable
      Architectures:
      - x86_64
  EventSourceMappingSQS:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
        - SQSQueue
        - Arn
      FunctionName:
        Fn::GetAtt:
        - SQSToLambdaFunction
        - Arn
      StartingPosition: TRIM_HORIZON
  DynamoDBToLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-DynamoDBToLambdaFunction
      Handler: index.lambda_handler
      Code:
        ZipFile: "import boto3\nimport json\nimport os\nimport logging\n\nlogger =\
          \ logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nSNS_ID = os.getenv('SNS_ID')\n\
          \nclient = boto3.client('sns')\n\ndef lambda_handler(event, context):\n\
          \    logger.info('## EVENT')\n    logger.info(event)\n    \n    for record\
          \ in event[\"Records\"]:\n\n        if record['eventName'] == 'INSERT':\n\
          \            logger.info(\"New order received\")\n            new_record\
          \ = record['dynamodb']['NewImage']\n            logger.info(\"New order:\
          \ \" + str(new_record))\n            response = client.publish(\n      \
          \          TargetArn = SNS_ID,\n                Message = json.dumps({'default':\
          \ json.dumps(new_record)}),\n                MessageStructure = 'json'\n\
          \            )\n"
      Role:
        Fn::GetAtt:
        - LambdaDynamoDBStreamsSNSRole
        - Arn
      Runtime: python3.9
      Environment:
        Variables:
          SNS_ID:
            Ref: SNSTopic
      Architectures:
      - x86_64
      Timeout: 20
  EventSourceMappingDynamoDB:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
        - DynamoDBTable
        - StreamArn
      FunctionName:
        Fn::GetAtt:
        - DynamoDBToLambdaFunction
        - Arn
      StartingPosition: TRIM_HORIZON
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: orderID
        AttributeType: S
      KeySchema:
      - AttributeName: orderID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${AWS::StackName}-SQSQueue
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-SNSTopic
      Subscription:
      - Endpoint:
          Ref: SNSemail
        Protocol: email
  APIGatewayToSQS:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-APIGatewayToSQS
      EndpointConfiguration:
        Types:
        - REGIONAL
  APIGatewayToSQSResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - APIGatewayToSQS
        - RootResourceId
      PathPart: orders
      RestApiId:
        Ref: APIGatewayToSQS
  APIGatewayToSQSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId:
        Ref: APIGatewayToSQSResource
      RestApiId:
        Ref: APIGatewayToSQS
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path//${SQSQueue}/queue
        Credentials:
          Fn::GetAtt:
          - APIGatewayToSQSRole
          - Arn
Outputs:
  SQSQueueURL:
    Description: SQS Queue URL
    Value:
      Fn::GetAtt:
      - SQSQueue
      - QueueUrl
  SQSQueueARN:
    Description: SQS Queue ARN
    Value:
      Fn::GetAtt:
      - SQSQueue
      - Arn
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value:
      Ref: DynamoDBTable
  DynamoDBTableARN:
    Description: DynamoDB Table ARN
    Value:
      Fn::GetAtt:
      - DynamoDBTable
      - Arn
  DynamoDBTableStreamARN:
    Description: DynamoDB Table Stream ARN
    Value:
      Fn::GetAtt:
      - DynamoDBTable
      - StreamArn
  SNSTopicARN:
    Description: SNS Topic ARN
    Value:
      Ref: SNSTopic
  SNSTopicName:
    Description: SNS Topic Name
    Value:
      Ref: SNSTopic
