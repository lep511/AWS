AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Lambda function triggered by an AWS API Gateway HTTP APIs call through
  an Amazon SQS Queue for buffering
Globals:
  Function:
    Environment:
      Variables:
        STAGE: Production
        TABLE_NAME:
          Ref: DynamoDBTable
        SNS_ID:
          Ref: SNSTopic
Parameters:
  SNSemail:
    Type: String
    Description: Email address to send SNS notifications to
    Default: sample@site.com
Resources:
  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${AWS::StackName}-MySqsQueue
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - MyHttpApiAccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength"
          }'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../../api.yaml
  LambdaFunctionReadSQS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionReadSQS
      Description: Lambda to be invoked by the SQS Queue
      CodeUri: LambdaFunctionReadSQS
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 20
      MemorySize: 128
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTable
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - MySqsQueue
              - Arn
            BatchSize: 10
    Metadata:
      SamResourceId: LambdaFunctionReadSQS
  MyHttpApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-AllowSqsIntegration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
            - sqs:SendMessageBatch
            Resource:
              Fn::GetAtt:
              - MySqsQueue
              - Arn
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource:
              Fn::GetAtt:
              - MyHttpApiAccessLogs
              - Arn
  MyHttpApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: MyHttpApi-Access-Logs
      RetentionInDays: 1
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-DynamoDBTable
      AttributeDefinitions:
      - AttributeName: orderID
        AttributeType: S
      KeySchema:
      - AttributeName: orderID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  LambdaFunctionReadDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionReadDynamoDBStream
      Description: Lambda to be invoked by the DynamoDB Streams
      CodeUri: LambdaFunctionReadDynamoDBStream
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 20
      MemorySize: 128
      Policies:
      - SNSCrudPolicy:
          TopicName:
            Fn::GetAtt:
            - SNSTopic
            - TopicName
      Events:
        MyDynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - DynamoDBTable
              - StreamArn
            StartingPosition: LATEST
            BatchSize: 10
    Metadata:
      SamResourceId: LambdaFunctionReadDynamoDBStream
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-SNSTopic
      Subscription:
      - Endpoint:
          Ref: SNSemail
        Protocol: email
Outputs:
  MyHttpApiEndpoint:
    Description: HTTP API endpoint
    Value:
      Fn::Sub: https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com
  LambdaFunctionReadSQS:
    Description: LambdaFunctionReadSQS function name
    Value:
      Ref: LambdaFunctionReadSQS
  LambdaFunctionReadDynamoDBStream:
    Description: LambdaFunctionReadDynamoDBStream function name
    Value:
      Ref: LambdaFunctionReadDynamoDBStream
  SNSTopic:
    Description: SNSTopic function name
    Value:
      Ref: SNSTopic
  DynamoDBTable:
    Description: DynamoDBTable table name
    Value:
      Ref: DynamoDBTable
  MySqsQueueARN:
    Description: SQS queue ARN
    Value:
      Fn::GetAtt:
      - MySqsQueue
      - Arn
  MySqsQueueURL:
    Description: SQS queue URL
    Value:
      Ref: MySqsQueue
