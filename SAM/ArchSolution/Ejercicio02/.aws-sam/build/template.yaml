AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Architecting Solutions - Building a Proof of Concept for Data Analytics
Parameters:
  ApiStageName:
    Type: String
    Description: The API Gateway Stage name (e.g. dev, prod, etc.)
    Default: dev
Globals:
  Function:
    Environment:
      Variables:
        ENV_NAME:
          Ref: ApiStageName
Resources:
  TransormDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-TransormData
      Description: Transform data from Kinisis Firehose to S3
      CodeUri: TransormDataFunction
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: TransormDataFunction
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-LambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*
          - Effect: Allow
            Action:
            - firehose:PutRecord
            Resource:
              Fn::Sub: arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${AWS::StackName}-deliverystream
  CreateTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-CreateAthenaTable
      Description: Create Athena table for data analytics
      CodeUri: CreateTableFunction
      Handler: create_table.lambda_handler
      Runtime: python3.9
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          STREAM_BUCKET_NAME:
            Ref: DataS3Bucket
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: DataS3Bucket
      - S3CrudPolicy:
          BucketName:
            Ref: DataS3Bucket
      - AthenaQueryPolicy:
          WorkGroupName: clickstream
    Metadata:
      SamResourceId: CreateTableFunction
  deliverystream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName:
        Fn::Sub: ${AWS::StackName}-deliverystream
      ExtendedS3DestinationConfiguration:
        RoleARN:
          Fn::GetAtt:
          - deliveryRole
          - Arn
        BucketARN:
          Fn::GetAtt:
          - DataS3Bucket
          - Arn
        Prefix: clickstream/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/
        ErrorOutputPrefix: error/!{firehose:error-output-type}/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 300
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: false
        S3BackupMode: Disabled
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Type: Lambda
            Parameters:
            - ParameterName: LambdaArn
              ParameterValue:
                Fn::GetAtt:
                - TransormDataFunction
                - Arn
            - ParameterName: NumberOfRetries
              ParameterValue: '3'
            - ParameterName: RoleArn
              ParameterValue:
                Fn::GetAtt:
                - deliveryLambdaRole
                - Arn
  deliveryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-deliveryLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-deliveryLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - TransormDataFunction
              - Arn
  DataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: AWS::AccountId
      Path: /
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-firehose-delivery-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - Fn::Sub: arn:aws:s3:::${DataS3Bucket}
            - Fn::Sub: arn:aws:s3:::${DataS3Bucket}/*
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - TransormDataFunction
              - Arn
  RestAPIclickstreamIngest:
    Type: AWS::Serverless::Application
    Properties:
      Location: RestAPIclickstreamIngest/template.yaml
      Parameters:
        EventStream:
          Ref: deliverystream
        EventStreamArn:
          Fn::GetAtt:
          - deliverystream
          - Arn
        ApiStageName:
          Ref: ApiStageName
    Metadata:
      SamResourceId: RestAPIclickstreamIngest
  AthenaTableDataAnalytics:
    Type: AWS::Serverless::Application
    Properties:
      Location: AthenaTableDataAnalytics/template.yaml
      Parameters:
        StreamBucketName:
          Ref: DataS3Bucket
    Metadata:
      SamResourceId: AthenaTableDataAnalytics
Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: DataS3Bucket
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value:
      Fn::GetAtt:
      - TransormDataFunction
      - Arn
  StreamName:
    Description: Name of the Kinesis Firehose stream
    Value:
      Ref: deliverystream
