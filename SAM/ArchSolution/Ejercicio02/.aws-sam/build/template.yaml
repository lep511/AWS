AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Architecting Solutions - Building a Proof of Concept for Data Analytics
Parameters:
  ApiStageName:
    Type: String
    Description: The API Gateway Stage name (e.g. dev, prod, etc.)
    Default: dev
Globals:
  Function:
    Environment:
      Variables:
        ENV_NAME:
          Ref: ApiStageName
Resources:
  TransormDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-TransormData
      Description: Transform data from Kinisis Firehose to S3
      CodeUri: TransormDataFunction
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: TransormDataFunction
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-LambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*
          - Effect: Allow
            Action:
            - firehose:PutRecord
            Resource:
              Fn::Sub: arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${AWS::StackName}-deliverystream
  CreateTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-CreateAthenaTable
      Description: Create Athena table for data analytics
      CodeUri: CreateTableFunction
      Handler: create_table.lambda_handler
      Runtime: python3.9
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          STREAM_BUCKET_NAME:
            Ref: DataS3Bucket
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: DataS3Bucket
      - S3CrudPolicy:
          BucketName:
            Ref: DataS3Bucket
      - AthenaQueryPolicy:
          WorkGroupName: clickstream
    Metadata:
      SamResourceId: CreateTableFunction
  deliverystream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName:
        Fn::Sub: ${AWS::StackName}-deliverystream
      ExtendedS3DestinationConfiguration:
        RoleARN:
          Fn::GetAtt:
          - deliveryRole
          - Arn
        BucketARN:
          Fn::GetAtt:
          - DataS3Bucket
          - Arn
        Prefix: clickstream/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/
        ErrorOutputPrefix: error/!{firehose:error-output-type}/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 300
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: false
        S3BackupMode: Disabled
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Type: Lambda
            Parameters:
            - ParameterName: LambdaArn
              ParameterValue:
                Fn::GetAtt:
                - TransormDataFunction
                - Arn
            - ParameterName: NumberOfRetries
              ParameterValue: '3'
            - ParameterName: RoleArn
              ParameterValue:
                Fn::GetAtt:
                - deliveryLambdaRole
                - Arn
  deliveryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-deliveryLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-deliveryLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - TransormDataFunction
              - Arn
  DataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: AWS::AccountId
      Path: /
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-firehose-delivery-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - Fn::Sub: arn:aws:s3:::${DataS3Bucket}
            - Fn::Sub: arn:aws:s3:::${DataS3Bucket}/*
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - TransormDataFunction
              - Arn
  RestAPIclickstreamIngest:
    Type: AWS::Serverless::Application
    Properties:
      Location: RestAPIclickstreamIngest/template.yaml
      Parameters:
        EventStream:
          Ref: deliverystream
        EventStreamArn:
          Fn::GetAtt:
          - deliverystream
          - Arn
        ApiStageName:
          Ref: ApiStageName
    Metadata:
      SamResourceId: RestAPIclickstreamIngest
  AthenaWorkGroup:
    DependsOn: DataS3Bucket
    Type: AWS::Athena::WorkGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-athena-workgroup
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: false
        PublishCloudWatchMetricsEnabled: false
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation:
            Fn::Join:
            - ''
            - - s3://
              - Ref: DataS3Bucket
              - /result
  GlueDatabase:
    DependsOn: DataS3Bucket
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Fn::Sub: ${AWS::StackName}-glue-database
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId:
        Ref: SNSKeyAlias
  SNSKey:
    DeletionPolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access through SNS for all principals in the account that are
            authorized to use SNS
          Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:CreateGrant
          - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              kms:ViaService:
                Fn::Join:
                - .
                - - sns
                  - Ref: AWS::Region
                  - amazonaws.com
              kms:CallerAccount:
                Ref: AWS::AccountId
        - Sid: Allow direct access to key metadata to the account
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ':'
              - - 'arn:aws:iam:'
                - Ref: AWS::AccountId
                - root
          Action:
          - kms:*
          Resource: '*'
  SNSKeyAlias:
    DependsOn:
    - SNSKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Join:
        - ''
        - - alias/Stack-
          - Ref: AWS::StackName
          - /sns-key
      TargetKeyId:
        Ref: SNSKey
  AthenaMultipleQueriesStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
        - AthenaWorkflowExecutionRole
        - Arn
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"An example of using Athena to execute queries in sequence\
          \ and parallel, with error handling and notifications.\",\n  \"StartAt\"\
          : \"Pass\",\n  \"States\": {\n    \"Pass\": {\n      \"Type\": \"Pass\"\
          ,\n      \"Next\": \"Load Data to Database\"\n    },\n    \"Load Data to\
          \ Database\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:${AWS::Partition}:states:::athena:startQueryExecution.sync\"\
          ,\n      \"Parameters\": {\n        \"QueryString\": \"CREATE EXTERNAL TABLE\
          \ IF NOT EXISTS `${database}`.`data` (`event_time` STRING, `ticker_symbol`\
          \ STRING, `sector` STRING, `change` DOUBLE, `price` DOUBLE) ROW FORMAT SERDE\
          \ 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES\
          \ ('serialization.format' = ',','field.delim' = ',') LOCATION 's3://${bucket}/clickstream'\
          \ TBLPROPERTIES ('has_encrypted_data' = 'false', 'skip.header.line.count'='1');\"\
          ,\n        \"WorkGroup\": \"${workgroup}\"\n      },\n      \"Catch\": [\n\
          \          {\n            \"ErrorEquals\": [ \"States.ALL\" ],\n       \
          \     \"Next\": \"Send query results\"\n          }\n      ],\n      \"\
          Next\": \"Map\"\n    },\n    \"Map\": {\n      \"Type\": \"Parallel\",\n\
          \      \"ResultSelector\": {\n        \"Query1Result.$\": \"$[0].ResultSet.Rows\"\
          ,\n        \"Query2Result.$\": \"$[1].ResultSet.Rows\"\n      },\n     \
          \ \"Branches\": [\n        {\n          \"StartAt\": \"Start Athena query\
          \ 1\",\n          \"States\": {\n            \"Start Athena query 1\": {\n\
          \              \"Type\": \"Task\",\n              \"Resource\": \"arn:${AWS::Partition}:states:::athena:startQueryExecution.sync\"\
          ,\n              \"Parameters\": {\n                \"QueryString\": \"\
          SELECT * FROM \\\"${database}\\\".\\\"data\\\" limit 3\",\n            \
          \    \"WorkGroup\": \"${workgroup}\"\n              },\n              \"\
          Next\": \"Get Athena query 1 results\"\n            },\n            \"Get\
          \ Athena query 1 results\": {\n              \"Type\": \"Task\",\n     \
          \         \"Resource\": \"arn:${AWS::Partition}:states:::athena:getQueryResults\"\
          ,\n              \"Parameters\": {\n                \"QueryExecutionId.$\"\
          : \"$.QueryExecution.QueryExecutionId\"\n              },\n            \
          \  \"End\": true\n            }\n          }\n        },\n        {\n  \
          \        \"StartAt\": \"Start Athena query 2\",\n          \"States\": {\n\
          \            \"Start Athena query 2\": {\n              \"Type\": \"Task\"\
          ,\n              \"Resource\": \"arn:${AWS::Partition}:states:::athena:startQueryExecution.sync\"\
          ,\n              \"Parameters\": {\n                \"QueryString\": \"\
          SELECT sector, count(*) AS total FROM \\\"${database}\\\".\\\"data\\\" GROUP\
          \ BY sector\",\n                \"WorkGroup\": \"${workgroup}\"\n      \
          \        },\n              \"Next\": \"Get Athena query 2 results\"\n  \
          \          },\n            \"Get Athena query 2 results\": {\n         \
          \     \"Type\": \"Task\",\n              \"Resource\": \"arn:${AWS::Partition}:states:::athena:getQueryResults\"\
          ,\n              \"Parameters\": {\n                \"QueryExecutionId.$\"\
          : \"$.QueryExecution.QueryExecutionId\"\n              },\n            \
          \  \"End\": true\n            }\n          }\n        }\n      ],\n    \
          \  \"Catch\": [\n          {\n            \"ErrorEquals\": [ \"States.ALL\"\
          \ ],\n            \"Next\": \"Send query results\"\n          }\n      ],\n\
          \      \"Next\": \"Send query results\"\n    },\n    \"Send query results\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:${AWS::Partition}:states:::sns:publish\"\
          ,\n      \"Parameters\": {\n        \"Message.$\": \"$\",\n        \"TopicArn\"\
          : \"${snsTopicArn}\"\n      },\n      \"End\": true\n    }\n  }\n}"
        - snsTopicArn:
            Ref: SNSTopic
          database:
            Ref: GlueDatabase
          bucket:
            Ref: DataS3Bucket
          workgroup:
            Ref: AthenaWorkGroup
  AthenaWorkflowExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AthenaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - Ref: SNSTopic
          - Effect: Allow
            Action:
            - athena:getQueryResults
            - athena:startQueryExecution
            - athena:stopQueryExecution
            - athena:getQueryExecution
            - athena:getDataCatalog
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkGroup}
            - Fn::Sub: arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*
          - Effect: Allow
            Action:
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:ListMultipartUploadParts
            - s3:AbortMultipartUpload
            - s3:CreateBucket
            - s3:PutObject
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::*
          - Effect: Allow
            Action:
            - glue:CreateDatabase
            - glue:GetDatabase
            - glue:GetDatabases
            - glue:UpdateDatabase
            - glue:DeleteDatabase
            - glue:CreateTable
            - glue:UpdateTable
            - glue:GetTable
            - glue:GetTables
            - glue:DeleteTable
            - glue:BatchDeleteTable
            - glue:BatchCreatePartition
            - glue:CreatePartition
            - glue:UpdatePartition
            - glue:GetPartition
            - glue:GetPartitions
            - glue:BatchGetPartition
            - glue:DeletePartition
            - glue:BatchDeletePartition
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/*
            - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/*
            - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: DataS3Bucket
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value:
      Fn::GetAtt:
      - TransormDataFunction
      - Arn
  StreamName:
    Description: Name of the Kinesis Firehose stream
    Value:
      Ref: deliverystream
  GlueDatabase:
    Description: Name of the Glue database
    Value:
      Ref: GlueDatabase
  SNSTopic:
    Description: Name of the SNS topic
    Value:
      Ref: SNSTopic
